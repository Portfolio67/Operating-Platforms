




Gaming room
CS 230 Project Software Design Template
Version 2.0

Table of Contents

CS 230 Project Software Design Template	1
Table of Contents	2
Document Revision History	2
Executive Summary	3
Design Constraints	3
System Architecture View	3
Domain Model	3
Evaluation	3
Recommendations	5

Document Revision History

Version
Date
Author
Comments
2.0
06/01/2021
Shane Flaten
Second document added scalability architecture web-based platform, befits and downsides to developing in windows Linux mac, on server side and client side. Cost for supporting multiple clients. Development tools



Executive Summary

The client, The Gaming Room wants to develop a web-based game that serves multiple platforms based on their current game Draw It or Lose It, which is currently available on Android. This game will provide all the features the existing game.

Requirements
•	The App should extend all features of the android game to a web-based multi-platform.
•	Each team will have multiple players assigned to it. 
•	A game will have the ability to have one or more teams involved. 
•	Game and team names must be unique to allow users to check whether a name is in use when choosing a team name. 

Design Constraints
•	The App design team will Java, any machine with JVM can run a Java application
•	The App will be hosted on The Gaming Room’s servers.
•	If more than 1TB of data is used on the games media an outsourced server will be implemented
•	The game must meet the users reasonable compile time to be accepted.
•	Only one instance of the game can exist in memory at any given time. This can be accomplished by creating unique identifiers for each instance of a game, team, or player.
•	Singleton and Iterator design patterns will be used. 
•	The game must be based on the theme chosen. 
•	Start page with a container that will hold all the page content. And request to load images from the server side after a game has begun
•	The game will be the concept similar to the 1980s game win lose or draw
•	The game will render images from a large library on the server that host to the clients. should be used as clues. 
•	The game should have four rounds that’s in one minute each     
•	and the drones are rendered at the 30 second mark and the team must guess the puzzle before the time expire 
•	The team does not solve the puzzle within a 32nd mark three minute in teams can I offer one guess and a 15 second time limit.
•	A clients server pattern. The server will host thousands of clients. 
•	Client will keep track of the daily tasks of the game, and the server will host a separate database
•	Communication between the client and the server will be with encryption key they must match.
•	Ability for a drive or lose it to retrieve and process the data for the client is necessary to maintain quality of service, fast connectivity, increase reliability, and centralized administration that can perform security and updates efficiently.
•	It will be a Java API that is the industry standard for communication from the centralize server to the client.
•	reduce development cost this will be written in Java because Java can be run on any machine that has JVM.

System Architecture View

Please note: There is nothing required here for these projects, but this section serves as a reminder that describing the system and subsystem architecture present in the application, including physical components or tiers, may be required for other projects. A logical topology of the communication and storage aspects is also necessary to understand the overall architecture and should be provided.

Domain Model


The program using singleton creates only one GameService and checks to verify only one service is being used. The service has a getInstance of that service, that is called when modifying the lists. As you can see;  service = GameService.getInstance(); 

There is a class called Game, the game class has a list with objects of the other class called teams. to add instances to that list a method is used. First the program receives a name for the object we want to create, then using that given name we search for that same name on the list, if we found it returns that 
if not, it creates a new one.  Game, Player and Team are all subclasses for the base or parent class called Entity.  This means it inherits and the class from which the subclass is derived is called a superclass.  So, the keyword super is used to call the parent constructor. To inherit from a class, the extends keyword is used. Inheritance inherits attributes and methods from the parent class. Polymorphism is uses those methods to perform different tasks like getting and setting. The GameService can create zero to as many as needed instances of Game; The Game can create zero to as many as needed instances of Team; The Team can create zero to as many as needed instances of Player.
The iterator will check to see if a certain name is in use already every time a one is being added with Javas Iterator.










Evaluation
Development Requirements
Mac
Linux
Windows
Mobile Devices
Server Side
The Mack OS server is not that widely used but it’s easy to configure and super simple to install and manage. It’s only $20 and Mac has a proven security history. I also prefer this because of speed.
 
communicate with the server the client side software could be written in Java. Mac OS X you can use the  Jar Bundler application to turn jar files into Mac OS X applications.  Jar Bundler is distributed with the other developer tools and is located in Developer/Applications/. Start it, select the "Classpath and Files" tab and add  file  JavaSoundDemo.jar

Older versions can be more vulnerable to worms.   

Stores user passwords in super user for more security

Newer versions have ,multi factor authentication and biometrics

Encryption limits the domain of receivers of data 


Has less lines of code to protect. So less security holes

Global permission for variable access or a key matrix.

Has something similar to a role-based access control in through the apple developer.  

A fast virtual memory system for demand paging

Virtual memory has a lot of auto attributes and many easy to use functions.
The VM manager has auto paging for the most part 





it would be a lot of command line work. most open source packages aren’t updated that well and you never know who is really updating them. Getting  an application to run properly can be very difficult in Linux and time consuming, Driving up the cost. But Apache has been around a long time and it is widely used to host websites with good security.

to run and play the game from a .jar file And for some distributions like a Ubuntu you just need to right click the file and open properties permission and allow executing

From command-line you can do the same
x86 operating systems have an intel chip that does not allows execution of code in a stack section of memory. Preventing stack overflow attacks 

Encryption limits the domain of receivers of data 


The Linux system can use open source, so some stuff is free but 
Global permission for variable access or a key matrix.

Copy-on-write is efficient for new processes


Memory manager is more manual. This would take more time and cost more.  Algorithms would have to be used due to  insufficient auto OS support of memory management

The memory management system is complex but has many configurable settings. 


Microsoft has azure. Microsoft is widely used in the industry and has a proven platform to host on. again security is an issue. But the plus side is there’s lots of applications that are third-party that can help you develop and host.

x86 operating systems  and suns, SPARK chip have an intel chip that does not allows execution of code in a stack section of memory via use of the cpu.  Preventing stack overflow attacks

 can be susceptible to macro viruses.

Newer versions have ,multi factor authentication and biometrics

Encryption limits the domain of receivers of data 

Widows has  a complex protection but security holes for least privilege because of more lines of code to protect


Global permission for variable access or a key matrix.

Roll based access control of the exchange server

Copy-on-write is efficient for new processes

VM memory management looks more manual but has more functions that a programmer can perform.  The cost could be higher with this.  Some setting could be tweeted in the system preferences also unlike the other platforms

Microsoft operating systems take advantage of the advanced Memory management unit which is the relocation register the mapping hardware converts logical addresses into physical addresses 




you would have to devote for both android and App Store which is two different languages. But it’s easy to update the packages through the App Store and it’s secure. In the market reaches very large..>


application proxy firewall in communication with the app stores.

easier to protect against accidental loss of data with the auto cloud back ups

Encryption limits the domain of receivers of data, and is build into many app stores  for initial downloading.

Easy to implement multi factor authentication.

Cost would be a bit higher to implement if Kotin is used, but java is still an official language supported

Cost would be a bit higher to implement if
Objective-C and Swift the two main programming languages used to build iOS apps


Global permission for variable access or a key matrix.


Copy-on-write is efficient for new processes


Client Side
on the client side the Mac users service call Safari so the webpage would have to load on safari. A typical store but Mac can you run just about any website the Internet speed would determine what do you use in the website for them. One downside is flash. There’s a missing plug-in and Has to be installed.


Java is a compile anywhere.


Java has auto memory freeing, in mac free memory is required
Most modern Lennix distributions can run fire fox Google Chrome and opera. So there would be very little downside for running the web base application on a system.
Cookies are loaded into the web site and may not be stored in a Linux but this could be good for security.

Java is a compile anywhere.

Windows also can run just about any web browser. One downside is the security to windows.

Java is a compile anywhere.   

Copy-on-write is efficient for new processes


Direct allocations from the operating system via the VirtualAlloc function

would be easy for the client to download and use the app.

easier to protect against accidental loss of data with the auto cloud back ups

Software development kits for  includes API that is an intermediary between an app and an  platform. 

Java is a compile anywhere. And except for the ios the app can be made in java and run


The Android Runtime (ART) and Dalvik virtual machine
The Android Runtime (ART) and Dalvik virtual machine has some functions
without any  need for intervention from the programmer.
but releasing does require some coding.

Swift eliminates entire classes of unsafe code
 And had a memory metrics with a good Ui


Development Tools
Mac can run just about any ide And has an emulator. Xcode is very powerful.

Can use intelleJ or eclipse

Maven can import libraries for a jar file 

Access by matrix and a security key could be used.

Revocation of access privileges with the keys 


VM manager has function for releasing locking and retrieving memory.

Virtual memory in the new mac has
special page-fault handler acts immediately and  stops the currently executing code. it uses a
 backing store is a disk-based repository.

kernel gives the VM object a region of the logical address. 
With a memory-mapped file
A default pager
vnode the pager implements the memory-mapped file access and a self-referencing technique to implement copy-on-write region


POSIX message passing, Mac OS X 


Java. Pthreads, can be used everywhere for CPU threading for multiple processes
Java has a lot of api options for threads
The mew OS can eliminate threading issues  or can auto thread outside your code.

 software for multiple platforms. The POSIX routine using pthread_create.


For java
DatagramSocket class. A multicast socket allows data to be sent to multiple recipients. 

The development tools would have to be tightly Integrated with command line which makes it difficult to work with.

The libraries are not updated frequently and can be written poorly

Can use intelleJ or eclipse

Maven can import libraries for a jar file

Access by matrix and a security key could be used.

Revocation of access privileges with the keys

Pages in the VM have to be copied to the swapping area, unlike the other operating systems

The memory management settings are  available via /proc filesystem and adjusted using sysctl. 

Swift  language supports all Apple platforms and Linux.  


Linux memory management is available via /proc filesystem and can be quired an

Linux kernel, all active processes of the cpu are in a doubly linked list 

POSIX message passing, 

Java. Pthreads, can be used everywhere for CPU threading for multiple processes Java has a lot of api options for threads. But not natively supported.

For java
DatagramSocket class. A multicast socket allows data to be sent to multiple recipients
Microsoft can run almost any IDE.   Can use intelleJ or eclipse

Maven can import libraries for a jar file.

Access by matrix and a security key could be used.

Revocation of access privileges with the keys


Direct allocations from the operating system via the VirtualAloc function.  


Java. Pthreads, can be used everywhere for CPU threading for multiple processes Java has a lot of api options for threads. But not natively supported. Windows has many threads for customization
For java
DatagramSocket class. A multicast socket allows data to be sent to multiple recipients
there’s android studio and Xcode to develop for mobile devices. Plus an emulator.

Software development kit for iOS includes API that is an intermediary between an app and an iOS platform. 

Java is not that common so it would be harder to implement.  So Swift should be used.  There are some OpenJDK  for doing this thought for iOS.  Kotin for android, but Java is still widely used.

Software development kit for iOS includes API that is an intermediary between an app and an iOS platform. 

Can use intelleJ or eclipse to code.

Maven can import libraries for a jar file to be exported to the app stores.  In iOS the libraries can be imported similarly for swift.

Access by matrix and a security key could be used.

Revocation of access privileges with the keys


Android uses (ART) and Dalvik virtual machine
Utilize  paging and memory-mapping
 keeps track of each memory allocation. Once it determines that a piece of memory is no longer being used by the program, it frees it back to the heap, without any intervention from the programmer.
The only way to release memory from an app is to release object references that the app hold

iOS app has a good MetricKit
  to manage use of the apps memory. If using swift instead of java it must be done manually. In object c Xcode provides a tool that automates the mechanical parts of the ARC conversion that releases memory when not used.  Swift I s the best for this issue.



Recommendations


Operating Platform: 
1.	My recommendation is the apple server for gamming room server.  The clients would all have different operating systems the programmers have to keep in mind. I would recommend Java virtual machine for its universal acceptance among all platforms. I recommend that the client side be minimal, using api to connect to the server and cloud service for the image jpegs.   The macOS server can be easily installed and there is an iOS version. Apple Kernel is based on the Unix like Darwin and is Portable Operating System Interface (POSIX) API compatible. There’s a profile manager and task manager built-in to it. You can also use it with a VPN. It has good security that can enable restrictions. And the reviews say it’s lightning fast. It’s a UNIX like server operating system. 
Java is the most universal language and will work on any machine. Except for the iOS app that would need to be developed in another language it is still possible to use java. This would increase efficiency in development and cost to gaming room.

I recommend the Mac apple server set up.  for the server side. Apples macOS is a highbred which means it has free and open sores operating system has an open source kernel name Darwin but includes closed source components. This is a BSD UNIX based system.  The library’s from each operating system would each contain its own APIs, like the graphical user interface. All APIs could be Java to simplify programming for multiple clients on different platforms. But for iOS you would have to use Swift and Coco. For instance Package java.awt.dnd `Drag and Drop is a direct manipulation gesture found in many Graphical User Interface systems that provides a mechanism to transfer information between two entities logically associated with presentation elements in the GUI.`  Using Java would create a global look and feel across devices.
Windows operating system uses the one to one model were Apple uses many to one with low level threads.
`A detached thread means that the thread’s resources are automatically reclaimed by the system when the thread exits. It also means that your code does not have to join explicitly with the thread later.` This is what the Apple server will do for a multicore processing.
POSIX systems include UNIX linux and macOS extensions for real time, thread library‘s known as Pthreads which could be used throughout except in windows.  Java which has a lot of API and support for concurrent and parallel programming every system that runs Java virtual machine can run a Java program which means Java should be used because it can be implemented in linux Windows an Mac. When a thread is created with a Java a API a single thread in windows is created unlike the Mac which can handle multiple threads. Java threads is available on iOS and android. Windows does not support Pthreads instead it has their own thread library but some third-party implementations are available if needed. This wouldn’t be a problem because the recommended operating system is Mac for the server. In a simple program for the client won’t require the use of threads As most logic will be done on the server. But if needed openMP is available on windows and Mac and Linux. and it supports parallel programming and shared memory.
Mobile operating systems often will have the core colonel boat use a set of frameworks in the software called middleware both Apple iOS and android has this this will support the databases multimedia and graphics




2.	Operating Systems Architectures: 

The system architecture intermediary between a user of a computer and the computer hardware. It does task such as: providing services like open read and write; schedules tasks; manages recourses. The kernel is at the core of the operating system architecture. Most modern systems use multicore processes.  The best use of these applications can increase efficiency.
 
The ARMv8 and ARM64 is the chip of iOS and android devises. mobile System-on-Chip (SoC) is in the M8 new mac chip and in the iOS devises, with no need for internal bus to transfer data into RAM. There also cheaper For this reason it is faster and more energy efficient.  Arm can support many more core for multithreading. Apple has a custom arm instruction set.  This makes the MAC ARM M8 a great choice. The cons is that it may not be suitable for most programmers due to the custom instruction set needed. But for this hosting a web application it could work. 


The platform is a X86-64. Based of the Intel chip.  With the new paging system, it supports large amounts of virtual memory and physical memory and 16 general purpose registers 128 bits each.

For networking the client server pattern, is an architectural pattern is the best choice for this application.  The server will also have a connection to the database that resides on a cloud for the images. This architecture will give the company  efficiency , maintain service and quality, increase productivity, enhance storage and access  for the users.

My recommendation is to stick with the new Apple M1 chip this is an arm chip it does have some limitations for the programmer book there’s many upsides. Speeding cost plus development would be easier not having to use multiple architecture. My second choice would be the Intel that is in both Mac and windows in some cases. The Linux server is good in widely used but requires much more manual tweaking of settings and programming for storage and etc.

A couple good architecture is to name are the macOS X 86 CPU windows 10 and the Intel running on intel. Because virtual machines Run in the all the major brands they can emulate the hardware for the software this is done because sometimes the CPUs is different and ned translating. Apple has this called  Rosetta.

Architecturally the Mac in the iOS have similar characteristics, there’s a user experience layer application framework layer which is in Cocoa touch frameworks and APIs for objects see in swift programming in the core frameworks which support the graphics all within the kernel environment Darwin, it also has the Mach microkernel. The iOS and the M1 has a chip architecture which helps with power management and aggressive memory management and has more security than before. The iOS would have to be done in swift and Coco because iOS restrict access to POSIX api. 

Apple has a grand central dispatch technology which does a lot of work for you. This allows you to run processes parallel. Windows also has something like the grand central dispatch but there’s a lot more manual options that have to be chosen while programming. Where as Linux you can use P threats or java treads and it’s all manual programming.  The grand central dispatch schedules tasks for runtime execution and a dispatching queue and removes them to a thread pool  it also manages. There’s two types of dispatch cues cereal and concurrent.

MACH it is designed for distributed systems and is included in the Mack OS an iOS operating system this kernel supports multiple tasks with multiple threads, most communication is carried out by messages which are passed through the ports MACH




3.	Storage Management: Mass storage od data is important to the end users of the application being developed. The file system and its algorithms also playes a part in the access of the storage. The Unix uses the fork()  for memory management .   the round robin algorithms is preferred here due to speed and multiple threads management.
Google also supports round robin algorithms for multiple users accessing there API cloud service, which is better than the block system from amazon that will not allow more than one user at a time. 

hard disk drives, non-volatile memory or major secondary storage, in and out units for most computers is structured storage in a one-dimensional array of logical blocks. Request made on this secondary storage are made by the file system and virtual memory, called the logical block number.  Errors can occur so error detection systems are put into place.  Apple has this upgraded in their Apple server. The scheduling algorithms are normally the first come first serve strategy and swap spaces usually used. Mac does not use raid algorithms, but in their serve they have a Raid for interoffice connected devises, windows also uses RAID. In this problem case object storage could be used for indexing photo storage objects would be self to find collections of data. our problems with raid because the pointer could be wrong that’s another reason, I recommend Apple the kernel takes care of the implementation of swapping. Air detection is done with checksums. Object storage would be a perfect fit the image storage.

Apples file system has a lot of features, 64 bit pointers, clones for files and directories, snapshot, space sharing, fast directory sizes, that resize automatically is done on empty directories .and atomic safe primitives that rename directories and bundles automatically. copy on right is shadow, a resource management technique where the resources can be shared between the copy in the original, yet modifications still create a copy. I/O coalscaling provides input output failures or interrupts within the file among others.
Copy on right mainly use its virtual memory of the operating system, processes implemented on the fork system does not modify any memory and executes a new process replacing the space entirely, this prevents the wasteful copy of all the memory during a Fork.
 
ZFS is an advanced file system he’s bye Oracle and Apple ‘s file system uses very similar features it can also port to Linux. Apple only uses raid for software but does not use in its file system RAID uses multiple physical disk drives into one or more logical units. 

I recommend Google cloud for a hybrid cloud which would include both public and private components and can be managed through tools like VMware or google zone system. The remote procedure Calls are carried out via TCP over an IP network and Google can multiple users for retrieving the JPEG ‘s. If latency is not an issue it could be done just on the server of the company, but it would require a lot of bandwidth. Object storage is used for big data problems like this such as indexing and cloud photos.  You can access the object ID rather than file name this this provides scalability. This would be a distributed operating system designed to make it more convenient, so users don’t have to login. A round robin could be used as an algorithm to sort through user requests. Containers instead of virtualization methods could be used within the cloud service for portability.




4.	Memory Management: To use the CPU efficiently for best response to users the computer must keep many processes in memory at a time. There are several algorithms that can be used, and each depends on the operating system used.

Virtual memory. vfork() is efficient method of process creation and is sometimes used to implement UNIX This scheme is pure demand paging: never bring a page into memory until it is required. 

Processes and Threads Pthreads can be multi-platform and can be accesses throught the java language and other as well.

As a result of CPU scheduling a lot of processes need to be kept in memory. There are memory management algorithms such as round robin fist in first out, and other approaches such as paging which Mac does automatically. Memory consist The larger ray of bites which has its own address the CPU fetches instructions from the main memory according to the program counter which may include other specific memory addresses. It first matches instructions from memory then the code may cause operands to be fetched after the instructions have been executed. The results get stored back in the memory. The CPU access the memory addresses as arguments any data being used use must be in one of the direct access storage devices if it’s not in memory it must be moved there before CPU can operate on them. Registers are built into the CPU, but main memory is accessed via transaction on the memory bus with the M1 chip it’s no longer needed. For fast access the CPU has as a cash.  While the processing system will execute commands, it is storing the state of one process.  The linker or loader finds the relocatable address to the absolute address and each bind is a map, from one address space to another. The address made by the CPU as a logical address and loaded into the memory address register called the physical address. With dynamic loading the routine is not loaded until it is called. Dynamic loading used by windows in Linux memory shared library ‘s linking rather than loading is postponed until execution time and the operating system usually has to help with this.
To execute both operating system and user processes, continuous memory allocation is used both Linux and windows put the system in high memory. This process of continuous memory allocation allocates memory for certain processes. some processes are protected through memory protection the CPU scheduler checks against the registers to do their protection. Apple uses the parent child processes. Memory allocation is done with the first fit best fit or worst fit basically searching for a hole in the memory. Fragmentation which processes are loaded and removed from memory and free memory space is broken into little pieces. and paging is done allowing processes to be allocated physical memory whenever memory is available paging avoids fragmentation in the need for compaction the page number is used in as an index per process and in a page table. Compaction puts all the free memory into one large block. Paging is used in Linux. Paging has a hierarchy in the table and hashing. Swapping involves move in entire process is between main memory and a backing store which is a secondary storage. Swapping is used traditionally in system but is not used in modern operating systems because of the time. windows, Linux both used a form of swapping. Mobile devices, Apple iOS has to the ask application to voluntary relinquish memory. Windows macOS and Linux under the Intel architecture uses segmentation the segmentation and paging, and paging equivalent to the memory management unit.

The arm chip has three transitional granules which vary in size, and each provide page size and sections of continuous memory known as regions this provides up to four levels of paging the arm and the arm has a transitional table register. arm has a transitional inside buffer at two levels which contains page number and corresponding frame. Modern systems use the paging to manage memory so physical memories divided into frames in logical memory and two blocks called pages. the logical address is divided into two parts the page number and page offset the page number is the index and the offset is the location of the frame been reference.

Another reason I recommend Mac is because a large use of virtual memory, this memory abstracts physical memory into an array of storage which allows for larger programs sharing of files the program does not need to be entirely in the memory, new processes can be created more efficiently copy and write allows child processes to share the same address space as the parent which is done in Mac. When memory runs low page replacement algorithms like the round robin ( I recommend this one)  is used or first and first out .Apple and Windows both use compressed memory is alternative to paging and  mobile systems also that don’t support paging which compresses a number of pages into a single page. Windows use virtual memory the same way with demand page and copy on right.


 In the iOS asks the application to voluntarily allocate memory read only is removed from main memory and later reload it into flash if necessary. The stack if it’s been modified it’s never removed. Android does a similar technique by writing the application state to flash memory so it can be quickly restored.

The use of compression is very important, and Apple has improved compression algorithms to take advantage of multiple cores performing compression in parallel. Apple calls the WKDM compression algorithm and it’s very fast and can compress pages 30 to 50% of its original size windows has something similar called Xpress.  

Apples arm chip is the SOC chip Meaning it has quicker access to memory without a bus

Apples grand central dispatch schedules tasks for a run time execution by placing them in a dispatch queue and removes them by putting them in a thread pool when are placed in a serial que, and their removed first in first out order, each task has its own serial Q known as the main queue the cues ensure sequential execution. Replacement is done in parallel and there are global dispatch cues and there’s a thread pool just of POSIX threads

When there are two or more identical process connected to a single shared memory symmetric multi-processing SMP gives full access to all  input  and output  I/O of the devices and it’s available in all operating systems

Another reason I recommend Java is it supports synchronization. This allows concurrent processes to share data.





5.	Distributed Systems and Networks: This system will need to be distributed due to the fact that the images need to be populated on the client’s user interface at a regular speed.  This could all be done in a client server model.  A REST API is the best choice with SQL being the most frequently used and a universal language.  This would be similar to a micro service which is more scalable and adaptable. Where the user would log into the company’s server and the users account and stats would be stored there along with the game logic, this would be a common clint server model; but a cloud service would be used to retrieve the images that are populated on a regular basis. Windows azure and kubernets containers that have optional algorisms for data access. Azure also has regional clouds unlike google, so it’s good for international but the company would have to maintain multiple clouds, unlike Google were the cloud id does not need a regional location.  
But because the company may have issues with region latency if the company goes international, a cloud api could also be used to gain access to the images populated.  I recommend google cloud for scalability, number of users at once, and international access.  The main admin and other user accounts and logic could be done on the company’s server.  This would be a client server model that is best for efficiency, reduced redundancy, security, and administration. If regional latency is not an issue then a regular client server model is fine. 

 Apple uses both TCP and UDP to transfer data packets.  The ios uses only TCP.  For this reason, there is no other reason to use anything else besides TCP.  The Unix uses the pipe() for communication the mac was chosen due to the many-to-many model.   This is good for multiple users. And Server Admin makes it easy to set up replication services for Open Directory 

I recommend the client-server system, this structure is the best structure for Serving multiple clients. Clients send a request to perform an action, for example read or perform logic on data and in response to the server with execute that action. The logic, admin and user accounts for login would take place on the central server.  The server can serve multiple clients and the client could use the server and Google cloud to form a hybrid system. The server will specify available files on a volume or directory level. The client identification will be done with the key or other name identifier and IP address. The server must trust the client per presenting the correct user ID. This communication would be done through TCP protocol because mounting of a file system is not needed. To detect the link and site failures and user at failure as a heartbeat would monitor procedures.   The network would be using api requests.  The Sign in with Apple REST API is a web service that connects you to Apple's authentication servers. Or java could be used.  Apple service can generate and validate the identity tokens used to verify a user’s identity.
To sign in from a web app or other platform, like Android, use Sign in with Apple JS. Alternatively, to let users set up accounts and sign into your native iOS, macOS, use the Authentication Services framework.
Apple sever has a profile manager for admins to configure, so no manual coding is needed. Also, NetInstall lets you automate the deployment of OS X software installs and upgrades across your network. 
Apple also has Fault-Tolerant Design for network interrupts.



6.	Security:  Protection controls the access of programs recourses, and programs. Security can protect the integrity of information, recourses, unauthorized access, and destruction or alterations. Both can be done within the code by the use of private and protected data. Because the user cannot change the code of the operating system through the program because it’s not loaded this helps with security the Mack OS server does come with very good security with a clock to make sure loops don’t keep running.  Error detection by throwing exceptions to catch illegal use of memory location to much CPU time and overflow detection would be coded into the application. Also, the singleton design pattern would be used to ensure that only one instance is running at a time in the app of the user.

The client server pattern makes requests from the client and provides those services. The communication is done over TCP/IP. During this direct contact most cases both client and server encryption keys must match.  The client side the user will only have read privileges during run time. This can be done in setting on the mac and windows systems. With Linux chmod in the command line would have to be done. For this reason, I recommend Apple or windows server. The app store has similar settings, but for android it must be coded into the app. There you can add install permissions for account set up and run time permissions for image access.  The java.security.Principal is part of the authenticator class and would be used to verify the communication with the server.

Apples file system has encryption at the file level with single and multiple keys. this is crucial for selective authorization.
Trojan horse and trap door should be prevented a Trojan horse is a malicious program which gives full control to another PC making copies of them and stealing information were a trap door allows anyone to gain access in the system without going usual security procedures by bypassing authentication
denial of service conference legitimate users from accessing the system we’re logic bomb a stack and buffer overflow wouldn’t need to really be worried about

Viruses is a fragment of code in bedded in an otherwise legitimate program check sums could be used to prevent this app on a regular basis in a heartbeat monitor back to the server to check. The firewall must be used to filter the incoming data. worms are also a problem that uses the fork process to copy itself and consume resources, this was a problem man BSDUNIX, it uses a grappling hook to target the system. Port scanning is typically not done It’s easy to detect the closing unnecessary ports is necessary.

Authentication should be used as a multi factor authentication / bio metrics.  A key distribution table to check user access. Also, the use of protected in private classes. Communication between the server and client, via secure socket layer during TCP. The server obtains a certificate containing identification of the public encryption and if digital signature. A script that checks for unauthorized programs in system directories and incorrect bit sets. Check for unexpected or hidden network Damien’s any new entries in the start of Scripps, basically any changes to the file system. I like the use of a honey pot which is like a reverse firewall which lets potential hackers into the honey pot but not allow any outgoing traffic. 
 Mac router could employ intrusion detection system by filtering in shutting down suspicious traffic you can use signature page detection an anomaly detection.   Macs in general are much more secure. The client’s system you can’t guarantee if they have viruses or firewall up, so a heartbeat and checksum could be used on the client. modern antivirus program would be needed which looks for anomalies such as a program being opened from something other than the compiler. Mac also has a sandbox system which will help secure the system by running the suspicious program in it.

Trip wire file system which would monitor files and directories for changes. This in addition to auditing the log such as including authentication failures and successes network access and system calls

Denial of service could be informative from a click on the website which downs loads a Java a Applet. So this is protected with coding.

mandatory access control was implemented with the free BSD in macOS and iOS linux also has a version SE linux project and windows has the vista mandatory integrity control. The MAC concept of labels as an identifier assigned to an object like a file or device and can also be applied to processes.  

Apple has a system protection called entitlements which are declaration declaratory permissions XML property only if the entitlements are present the operation is allowed apple imbeds entitlements in the code signature, once it’s loaded it has no way of accessing the signature. Apple also has a system Integrity protection SIP, this restrict access to system files and resources so even the root user can’t tamper with them.

I sandboxing enforces strict limitations on a process Apple uses this along with other major operating systems this provides ability to control which operations are allowed or blocked and also their arguments. macOS windows and iOS All use code signing, for instance Apple can disable all programs by stopping the signing when they are downloaded.

Virus Detection and Quarantine in apple server
To prevent destructive viruses, Mail Server scans email messages and attachments—if a virus is found, Mail Server quarantines and deletes email before it can make its way into your organization. 

Apple has the File Quarantine application to automatically update its malware definition list daily. Also a VPN Server. Allow users to securely connect to your organization’s network services and confidential information from home or away from the office. 










Reference
Silberchlatz, Abraham. (July 29, 2008)Operating systems concepts 8th edition 
Lavieri, Dr.Edward (2019 APRIL)  Hands-On Design Patterns with Java.  Published by Packt Publishing Ltd. Birmingham UK.
Dennis, Alan (Oct. 2012) INTRODUCTION TO SYSTEMS ANALYSIS AND DESIGN - Systems Analysis and Design with UML, 4th 	edition

Silberchlatz, Abraham. (July 29, 2008)Operating systems concepts 8th edition
About the Virtual Memory System https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/AboutMemory.html

Virtual Memory Manager
https://developer.apple.com/library/archive/documentation/mac/pdf/Memory/Virtual_Memory.pdf


Virtual memory functions 05/31/2018
https://docs.microsoft.com/en-us/windows/win32/memory/virtual-memory-functions

Gorman M. (2007) Understanding the linux Virtual memory manager
https://www.kernel.org/doc/gorman/pdf/understand.pdf

Memory Management
https://www.kernel.org/doc/html/latest/admin-guide/mm/index.html


Overview of memory management
https://developer.android.com/topic/performance/memory-overview

About Threaded Programming
https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/AboutThreads/AboutThreads.html#//apple_ref/doc/uid/10000057i-CH6-SW2

Processes and Threads
https://docs.microsoft.com/en-us/windows/win32/procthread/processes-and-threads

iOS Manual Pages
https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/socket.2.html

Windows Sockets 2
https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2

Using Sockets and Socket Streams https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/UsingSocketsandSocketStreams.html
Silberchlatz, Abraham. (2018) Operating systems concepts 10th edition


Memory allocation among processes    https://developer.android.com/topic/performance/memory-management

HAJDARBEGOVIC N. ARM Servers: Mobile CPU Architecture For Datacentres?
https://www.toptal.com/back-end/arm-servers-armv8-for-datacentres


Using the Cloud SQL Admin API
 https://cloud.google.com/sql/docs/mysql/admin-api


Integrate Google Cloud Storage with Google Cloud SQL for MySQL
https://www.xplenty.com/integrations/google-cloud-storage/google-cloud-sql-for-mysql/


Permissions on Android
https://developer.android.com/guide/topics/permissions/overview


Principal and Identity Objects (07/15/2020) retrieved from:  https://docs.microsoft.com/en-us/dotnet/standard/security/principal-and-identity-objects

Dropwizard – BasicAuth Security Example retrieved from:  
https://howtodoinjava.com/dropwizard/dropwizard-basic-auth-security-example/
Java™ Platform, Standard Edition 7 API Specification
https://docs.oracle.com/javase/7/docs/api/

https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/APFS_Guide/Features/Features.html

wiki copy on write. https://en.wikipedia.org/wiki/Copy-on-write

Raid wiki https://en.wikipedia.org/wiki/RAID


Security https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/15_Security.html

OSXServer https://www.apple.com/media/us/osx/2013/server/docs/OSXServer_Product_Overview.pdf





